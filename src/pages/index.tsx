import { Button, Typography } from "@mui/material";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { CalendarScheduler } from "../components/CalendarScheduler";
import { Options } from "../components/ModalEntitys/Index";
import { mapArrayEventCalendar } from "../domain/EventCalendar";
import { getAllEventsCalendar } from "../services/eventCalendarApi";
import { ContainerMain } from "../styles/Home";
import { useGroupContext } from "../hooks/GroupContext";
import { getAllGrupos } from "../services/grupoApi";

interface IHomeProps {
  listAllEventsCalendar: any;
}

const Home = ({ listAllEventsCalendar }: IHomeProps) => {
  const [listEventsCalendar, setListEventsCalendar] = useState<any[]>([]);
  const [openModal, setOpenModal] = useState(false);
  const { selectedGroup } = useGroupContext();

  const getEvents = async (grupoId:string) => {
       const eventsCalendar = await getAllEventsCalendar(grupoId);
       const listAllEventsCalendar = mapArrayEventCalendar(eventsCalendar);
       setListEventsCalendar(listAllEventsCalendar);
  };
  const getGrupos = async () => {
    const gruposAll = await getAllGrupos();
    getEvents(gruposAll[0]._id);;
  };
  useEffect(() => {
    if(Object.keys(selectedGroup).length === 0){
      getGrupos();
    }else{
      getEvents(selectedGroup._id);
    }
  }, [selectedGroup]);
  

  const handleOpenModal = () => {
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
  };

  return (
    <>
      <Head>
        <title>Full Calendar Scheduler</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ContainerMain>
        <Button onClick={handleOpenModal}>Entidades</Button>
        <Typography variant="h2"> Calendario Universitario </Typography>
        <CalendarScheduler eventsCalendar={listEventsCalendar} />
      </ContainerMain>
      {/* <ModalForm open={openModal} onClose={handleCloseModal} /> */}
      <Options open={openModal} onClose={handleCloseModal} />
    </>
  );
};


// export const getServerSideProps: GetServerSideProps = async () => {
//   const eventsCalendar = await getAllEventsCalendar();
//   const listAllEventsCalendar = mapArrayEventCalendar(eventsCalendar);

//   return {
//     props: {
//       listAllEventsCalendar: listAllEventsCalendar ?? [],
//     },
//   };
// };

export default Home;
